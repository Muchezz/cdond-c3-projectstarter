version: 2.1

# slack-fail-post-step:
#     post-steps: 
#      - slack/status:
#         fail_only: true

orbs:
  slack: circleci/slack@4.4.4
  aws-cli: circleci/aws-cli@2.0.3

commands:
   
  
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
        type: string
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID}
            aws s3 rm s3://udapeople-prod-<<parameters.workflow_id>> --recursive
            aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID}

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm i
            npm run build
           
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
          
      - slack/notify:
          channel: C02F9FY9QF3
          event: fail
          template: basic_fail_1
          


  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             cd backend
             npm i
             npm run build
             
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

      # - post-steps:
      #   - slack/notify:
      #       channel: C02F9FY9QF3
      #       event: fail
      #       template: basic_fail_1
          


  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Run frontend Test
          command: |
            cd frontend
            npm i
            npm run test
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run backend Test
          command: |
            cd backend
            npm i
            npm run test


  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Run frontend Audit
          command: |
            cd frontend
            npm i
            npm audit fix --audit-level=critical --force

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run backend Audit
          command: |
            cd backend
            npm i
            npm audit fix --audit-level=critical --force


  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum -y install tar gzip 
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople-${CIRCLE_WORKFLOW_ID:0:6} \
              --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:6} \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:6}"  
              

              
               
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople-${CIRCLE_WORKFLOW_ID:0:6} \
              --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:6} \
              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:6}  
              

              
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            echo "[web]" > .circleci/ansible/inventory.txt
            
            aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=udapeople-${CIRCLE_WORKFLOW_ID:0:6}" \
              --output text >> .circleci/ansible/inventory.txt

            curl -H "Content-Type: text/plain" -H "token: ${CIRCLE_WORKFLOW_ID}" \
              --request PUT \
              --data `aws ec2 describe-instances \
                --query 'Reservations[*].Instances[*].PublicIpAddress' \
                --filters "Name=tag:project,Values=udapeople-${CIRCLE_WORKFLOW_ID:0:6}" \
                --output text` \
              https://api.memstash.io/values/UdapeopleDns
              echo URL: https://api.memstash.io/values/UdapeopleDns
              echo Token: ${CIRCLE_WORKFLOW_ID}
      
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure      


      # - slack/notify:
      #     channel: C02F9FY9QF3
      #     event: fail
      #     template: basic_fail_1


  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: [1c:e1:51:09:8e:8f:13:47:16:be:83:8c:c0:88:f8:fd]
      - attach_workspace:
           at: ~/

      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
            apk add --update tar gzip ansible nodejs npm curl
            pip install awscli
            
      - run:
          name: Configure server
          no_output_timeout: 25m
          command: |
            pwd &&
            ls -la
            cd .circleci/ansible
            cat inventory.txt
            ansible-playbook -i inventory.txt configure-server.yml
            
      # Here's where you will add some code to rollback on failure      

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run: 
          name: migration
          command: |
            cd backend
            npm install
            
      - run:
          name: Run migrations
          command: |

            
            touch backend/.env   
            echo ENVIRONMENT=production > "backend/.env"
            echo TYPEORM_CONNECTION=postgres >> "backend/.env"
            echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> "backend/.env"
            echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> "backend/.env"
            echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> "backend/.env"
            echo NODE_ENV=production >> "backend/.env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> "backend/.env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> "backend/.env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> "backend/.env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> "backend/.env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> "backend/.env"
            
            cd backend 
            npm run migrations:revert
            npm run migrations >> migration_output.txt
            cat migration_output.txt
      
           
      - run:
          name: Send migration results to memstash
          command: |
            
            cd backend
            cat migration_output.txt
            if grep -q "has been executed successfully." migration_output.txt
            then
            curl -H "Content-Type: text/plain" -H "token: migration-${CIRCLE_WORKFLOW_ID}" \
            --request PUT \
            --data "1" https://api.memstash.io/values/migration-${CIRCLE_WORKFLOW_ID:0:6}
            else
            curl -H "Content-Type: text/plain" -H "token: migration-${CIRCLE_WORKFLOW_ID}" \
            --request PUT \
            --data "0" https://api.memstash.io/values/migration-${CIRCLE_WORKFLOW_ID:0:6}
            fi

            # if  [grep -c "has been executed successfully" migration.txt > 0 ]
            # then
            #   curl -H "Content-Type: text/plain" \
            #     -H "token: migration-${CIRCLE_WORKFLOW_ID}" \
            #     --request PUT --data "1" \
            #     https://api.memstash.io/values/migration-${CIRCLE_WORKFLOW_ID:0:6}
            # else
            #   exit 1
            # fi
     # Here's where you will add some code to rollback on failure      


      # - slack/notify:
      #     channel: C02F9FY9QF3
      #     event: fail
      #     template: basic_fail_1

  deploy-frontend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout

      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
            apk add --update tar gzip ansible nodejs npm curl
            pip install awscli
      - run:
          name: Get backend url
          command: |
            BACKEND_IP=$(curl -H "token: ${CIRCLE_WORKFLOW_ID}" \
              --request GET https://api.memstash.io/values/UdapeopleDns)
            export API_URL="http://${BACKEND_IP}:3030" 

            echo ENVIRONMENT=production > "frontend/.env"
            echo NODE_ENV=production >> "frontend/.env"
            echo API_URL=$API_URL >> "frontend/.env"

            echo "${API_URL}"
      - run:
          name: Deploy frontend objects
          command: |
            npm install webpack-dev-server -g
            cd frontend
            npm install
            npm run build
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:6} --recursive
            echo s3://udapeople-${CIRCLE_WORKFLOW_ID:0:6}
      
  
      # Here's where you will add some code to rollback on failure      

  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: [1c:e1:51:09:8e:8f:13:47:16:be:83:8c:c0:88:f8:fd]
      - attach_workspace:
           at: ~/

      - run:
          name: Install dependencies
          command: |
            apk add --update tar gzip ansible nodejs npm curl openssh-client
            pip install awscli
      - run:
          name: Deploy backend
          command: |
            cd .circleci/ansible
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
      # Here's where you will add some code to rollback on failure  

  smoke-test:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --update curl
      - run:
          name: Get backend url
          command: |
            BACKEND_IP=$(curl -H "token: ${CIRCLE_WORKFLOW_ID}" \
              --request GET https://api.memstash.io/values/UdapeopleDns)
            export API_URL="http://${BACKEND_IP}:3030"
      - run:
          name: Backend smoke test.
          command: |
            curl -s "http://${BACKEND_IP}:3030/api/status"
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:6}.s3-website-us-east-1.amazonaws.com"
            if curl -s ${URL} | grep "Welcome"
            then
              return 1
            else
              return 0
            fi
      # Here's where you will add some code to rollback on failure  


workflows:
  default:
    jobs:
      - build-frontend
      - test-frontend:
          requires: [build-frontend]
      - scan-frontend:
          requires: [build-frontend] 

      - build-backend
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
        
      - deploy-infrastructure:
           requires: [test-frontend, test-backend, scan-frontend, scan-backend]
           filters:
             branches:
               only: [master]
      - configure-infrastructure:
           requires: [deploy-infrastructure]

      - run-migrations:
          requires: [configure-infrastructure]

      - deploy-frontend:
           requires: [run-migrations]
      - deploy-backend:
           requires: [run-migrations]

      - smoke-test:
           requires: [deploy-backend, deploy-frontend]

     